#Li Sheng ID:5130379017
#I deal with more than one element in a cycle so it can run faster.
#I devide the mrmovl and rmmovl instruction to solve the load/use hazerd.
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-6,%edx
	jl SLoop
BLoop:	mrmovl (%ebx), %esi	# read val from src...
Npos1:	andl %esi, %esi		# val <= 0?
	mrmovl 4(%ebx), %edi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	jle Npos2	
	iaddl $1, %eax		# count++
Npos2:	andl %edi, %edi		# val <= 0?
	mrmovl 8(%ebx), %esi	# read val from src...
	rmmovl %edi, 4(%ecx)	# ...and store it to dst
	jle Npos3	
	iaddl $1, %eax		# count++
Npos3:	andl %esi, %esi		# val <= 0?
	mrmovl 12(%ebx), %edi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	jle Npos4	
	iaddl $1, %eax		# count++
Npos4:	andl %edi, %edi		# val <= 0?
	mrmovl 16(%ebx), %esi	# read val from src...
	rmmovl %edi, 12(%ecx)	# ...and store it to dst
	jle Npos5	
	iaddl $1, %eax		# count++
Npos5:	andl %esi, %esi		# val <= 0?
	mrmovl 20(%ebx), %edi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	jle Npos6	
	iaddl $1, %eax		# count++
Npos6:	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 20(%ecx)	# ...and store it to dst
	jle Npos7	
	iaddl $1, %eax		# count++
Npos7:	iaddl $24,%ebx		
	iaddl $24, %ecx		# dst++
	mrmovl (%ebx),%esi
	iaddl $-6, %edx		# len-8
	jge Npos1			# if so, goto BLoop:

SLoop:	mrmovl (%ebx),%esi
	iaddl $6,%edx
	iaddl $-1,%edx
	jl Done
	andl %esi,%esi
	rmmovl %esi, (%ecx)	# read val from src...
	mrmovl 4(%ebx), %esi	# ...and store it to dst
	jle N1
	iaddl $1, %eax
N1:	iaddl $-1,%edx
	jl Done
	andl %esi,%esi
	rmmovl %esi, 4(%ecx)	# read val from src...
	mrmovl 8(%ebx), %esi	# ...and store it to dst
	jle N2
	iaddl $1, %eax
N2:	iaddl $-1,%edx
	jl Done
	andl %esi,%esi
	rmmovl %esi, 8(%ecx)	# read val from src...
	mrmovl 12(%ebx), %esi	# ...and store it to dst
	jle N3
	iaddl $1, %eax
N3:	iaddl $-1,%edx
	jl Done
	andl %esi,%esi
	rmmovl %esi, 12(%ecx)	# read val from src...
	mrmovl 16(%ebx), %esi	# ...and store it to dst
	jle N4
	iaddl $1, %eax
N4:	iaddl $-1,%edx
	jl Done
	andl %esi,%esi
	rmmovl %esi, 16(%ecx)	# read val from src...
	mrmovl 20(%ebx), %esi	# ...and store it to dst
	jle N5
	iaddl $1, %eax
N5:	iaddl $-1,%edx
	jl Done
	andl %esi,%esi
	rmmovl %esi, 20(%ecx)	# read val from src...
	jle Done
	iaddl $1, %eax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
